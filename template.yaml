AWSTemplateFormatVersion: "2010-09-09"

Description: "Initial apigateway resource and map to lambda"

Parameters:
  ChSecret:
    Type: String
    Default: "<channel_secret>"
  ChToken:
    Type: String
    Default: "<channel_token>"
  Receiver:
    Type: String
    Default: "<receiver>"
  MemorySize:
    Type: String
    Default: 128
  Timeout:
    Type: String
    Default: 5
  Runtime:
    Type: String
    Default: go1.x
  Prefix:
    Type: String
    Default: dev_

Resources:

  # Lambda
  botNotify:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Prefix}botNotify
      Handler: botNotify
      Role: !ImportValue LambdaRoleArn
      Code:
        S3Bucket: lambda-zip.sila
        S3Key: botNotify.zip
      Environment: 
        Variables:
          CHANNEL_SECRET: !Ref ChSecret
          CHANNEL_TOKEN: !Ref ChToken
          RECEIVER: !Ref Receiver
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout

  botEvent:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Prefix}bot_event
      Handler: bot_event
      Role: !ImportValue LambdaRoleArn
      Code:
        S3Bucket: lambda-zip.sila
        S3Key: bot_event.zip
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout

  botUploadImg:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Prefix}botUploadImg
      Handler: botUploadImg
      Role: !ImportValue LambdaWithS3RoleArn
      Code:
        S3Bucket: lambda-zip.sila
        S3Key: botUploadImg.zip
      Environment: 
        Variables:
          CHANNEL_SECRET: !Ref ChSecret
          CHANNEL_TOKEN: !Ref ChToken
          RECEIVER: !Ref Receiver
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
  
  # Resource
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: LineBot
      Description: "Line Bot"
      FailOnWarnings: true

  Notify:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: notify

  NotifyMsg:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref Notify
      PathPart: "{msg}"

  Upload:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: upload

  # Permission
  botNotifyPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt botNotify.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiID}/*/GET/notify/*
        - restApiID: !Ref RestApi

  botEventPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt botEvent.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiID}/*/POST/
        - restApiID: !Ref RestApi

  botUploadImgPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt botUploadImg.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiID}/*/POST/upload
        - restApiID: !Ref RestApi

  # Method
  botNotifyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref NotifyMsg
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS_PROXY
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${botNotifyFuncArn}/invocations
          - botNotifyFuncArn: !GetAtt botNotify.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  botEventMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS_PROXY
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${botEventFuncArn}/invocations
          - botEventFuncArn: !GetAtt botEvent.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  botUploadImgMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref Upload
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS_PROXY
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${botUploadImgFuncArn}/invocations
          - botUploadImgFuncArn: !GetAtt botUploadImg.Arn
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # Deploy API
  Deployment:
    DependsOn: 
      - botNotifyMethod
      - botEventMethod
      - botUploadImgMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      Description: My LineBot
      StageName: Test